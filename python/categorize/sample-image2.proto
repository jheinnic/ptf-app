syntax = "proto3";

package pictures.luminostics.lab.research;

option java_multiple_files = true;
option java_outer_classname = "LabImages";
option java_package = "pictures.luminostics.lab.research.model";

// Encoding for 16-bit Grayscale PNG pixel data, using uint32 to trigger Protobuf varint
message DenseFlatMatrix {
    repeated uint32 data = 10;
}

// Encoding for 16-bit Grayscale PNG pixel data, using binary representation
message DenseFlatVarintMatrix {
    uint32 dataLen = 9;
    bytes data = 10;
}

// Encoding for SciPy's BSR Sparse Matrix format, using uint32 to trigger Protobuf varint
message BsrMatrix {
    uint32 blockWidth = 3;
    uint32 blockHeight = 4;
    repeated uint32 indPtr = 6;
    repeated uint32 indices = 8;
    repeated uint32 data = 10;
}

message BsrVarintMatrix {
    uint32 blockWidth = 3;
    uint32 blockHeight = 4;
    uint32 indPtrLen = 5;
    bytes indPtr = 6;
    uint32 indicesLen = 7;
    bytes indices = 8;
    uint32 dataLen = 9;
    bytes data = 10;
}

message OneValueBsrMatrix {
    uint32 cellValue = 2;
    repeated uint32 indPtr = 6;
    repeated uint32 indices = 8;
}

message OneValueBsrVarintMatrix {
    uint32 cellValue = 2;
    uint32 indPtrLen = 5;
    bytes indPtr = 6;
    uint32 indicesLen = 7;
    bytes indices = 8;
}

// A corner case where a dense matrix has [256,512) values
message SplitFlatMatrix {
    BsrMatrix lower = 1;
    BsrMatrix upper = 2;
}

message SplitBsrMatrix {
    repeated OneValueBsrMatrix slices = 1;
    repeated BsrMatrix chunks = 8;
}

message SplitBsrVarintMatrix {
    repeated OneValueBsrVarintMatrix slices = 1;
    repeated BsrVarintMatrix chunks = 8;
}

// Content that Luminostics places within its own XMP meataata namespace
message XmpHeaderContent {
    string uuid = 1;
    string dataType = 12;
    double captureTime = 13;
    float captureDelay = 14;
    float exposureTime = 15;
}

message ImageSampleContainer {
    XmpHeaderContent header = 1;
    uint32 pixelWidth = 2;
    uint32 pixelHeight = 3;
    bytes digitizedBy = 8;
    oneof flatDataMatrix {
        DenseFlatMatrix densePng = 9;
        BsrMatrix sparseBsr = 10;
        DenseFlatVarintMatrix denseVarintPng = 11;
        BsrVarintMatrix sparseVarintBsr = 12;
        SplitBsrMatrix splitBsr = 13;
        SplitBsrVarintMatrix splitVarintBsr = 14;
    }
}


